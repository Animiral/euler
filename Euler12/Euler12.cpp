//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28
//
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

#include "Primes.h"
#include <iostream>

using bignum = __int64;

Primes thePrimes;

constexpr bignum TriangleNumber(unsigned nth) noexcept
{
	// 8: 4 * 9
	// 1 + 8
	// 2 + 7
	// 3 + 6
	// 4 + 5

	// 7: 3 * 8 + 4
	// 1 + 7
	// 2 + 6
	// 3 + 5
	// 4
	bignum bignth = nth;
	return bignth / 2 * (bignth + 1) + (bignth / 2 + 1) * (bignth & 1);
}

constexpr bool Divides(bignum divisor, bignum dividend) noexcept
{
	return dividend / divisor * divisor == dividend;
}

unsigned CountDivisors(bignum number) noexcept
{
	unsigned divisors = 1;

	for(Primes::PrimeFactor factor : thePrimes.primeFactors(number)) {
		divisors *= factor.multiplicity + 1;
	}

	return divisors;
}

// broken
constexpr unsigned CountDivisors2(bignum number) noexcept
{
	unsigned count = 0;
	bignum high = number;

	for(unsigned i = 1; i <= number; i++)
		if(Divides(i, number))
			count += 1 + (i*i != number);

	return count;
}

void main()
{
	constexpr unsigned minDivisors = 501;

	for(unsigned nth = 1;; nth++) {
		bignum triangleNumber = TriangleNumber(nth);
		unsigned divisors = CountDivisors(triangleNumber);

		std::cout << "Examine " << nth << ". triangle number " << triangleNumber << " (" << divisors << " divisors)\n";

		if(divisors >= minDivisors)
			break;
	}

	char c;
	std::cin >> c;
}
